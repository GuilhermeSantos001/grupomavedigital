# Schema de informações passadas dos usuários logados
type AuthInfo {
    authorization: ID!
    username: String!
    token: String!
    name: String!
}

type Query {
    # #### Headers(`Obrigatórios`):
    # + `authorization(String | Array(String))`: Códigos de autorização da solicitação
    # + `encodeuri(Boolean)`: Usado para informar se os parametros estão comprimidos
    authLogin(
        usr_auth: String!,
        pwd: String!,
        twofactortoken: String,
        locationIP: String!,
        internetAdress: String!
    ): AuthInfo!
        @auth(keys: ["SweteNlPut4uqlBiwIchiXafe1ld1bRICriBra7iPRazOs0ItRAtiwriyoyuyo-u"])
        @encodeuri(method: "lz-string")
        @cost(complexity: 46)
    # #### Headers(`Obrigatórios`):
    # + `authorization(String | Array(String))`: Códigos de autorização da solicitação
    # + `token(String)`: Token exclusivo de segurança da solicitação
    # + `encodeuri(Boolean)`: Usado para informar se os parametros estão comprimidos
    # + `internetadress(String)`: Informa o endereço de IP da solicitação
    authLogout(usr_auth: String!, usr_token: String!): Boolean!
        @auth(keys: ["vlta#eke08uf=48uCuFustLr3ChL9a1*wrE_ayi0L*oFl-UHidlST8moj9f8C5L4"])
        @token(ignore: false)
        @encodeuri(method: "lz-string")
        @cost(complexity: 50)
    # #### Headers(`Obrigatórios`):
    # + `authorization(String | Array(String))`: Códigos de autorização da solicitação
    # + `encodeuri(Boolean)`: Usado para informar se os parametros estão comprimidos
    authExpired(usr_auth: String!, usr_token: String!): Boolean!
        @auth(keys: ["5wEvlBR8TRuxePL42thecuv8sP3Pe4lB56EzLBra9Iph9WiPRId3ONL20uK7T#Ip"])
        @encodeuri(method: "lz-string")
        @cost(complexity: 50)
    # #### Headers(`Obrigatórios`):
    # + `authorization(String | Array(String))`: Códigos de autorização da solicitação
    # + `encodeuri(Boolean)`: Usado para informar se os parametros estão comprimidos
    # + `temporarypass(Boolean)`: Usado para informar que a conta deve conter uma senha temporaria.
    emailResendConfirm(usr_auth: String!): Boolean!
        @auth(keys: ["p4YIfr$zoG9buqUD0Ochodu1enex2ZOCh8Y1C8beMlDIbrIqU4OThLsTe6LMEB@+"])
        @encodeuri(method: "lz-string")
        @cost(complexity: 50)
}

type Mutation {
    # #### Headers(`Obrigatórios`):
    # + `authorization(String | Array(String))`: Códigos de autorização da solicitação
    # + `encodeuri(Boolean)`: Usado para informar se os parametros estão comprimidos
    # + `temporarypass(Boolean)`: Usado para informar que a conta deve conter uma senha temporaria.
    registerUser(
        authorization: String!,
        privilege: [String!]!,
        fotoPerfil: String,
        username: String!,
        password: String!,
        name: String!,
        surname: String!,
        email: String!,
        cpfcnpj: String!,
        # #### Schema: `["street", "number", "complement", "district", "state", "city", "zipcode"]`
        location: [String!]!
    ): String!
        @auth(keys: ["brufiT87+uchUfI9eFlPhificRi+OzawIwrIfriTH2Fr0ke0&fodrispl8Lc0IZo"])
        @encodeuri(method: "lz-string")
        @cost(complexity: 50)
    # #### Headers(`Obrigatórios`):
    # + `authorization(String | Array(String))`: Códigos de autorização da solicitação
    # + `token(String)`: Token exclusivo de segurança da solicitação
    # + `encodeuri(Boolean)`: Usado para informar se os parametros estão comprimidos
    # + `internetadress(String)`: Informa o endereço de IP da solicitação
    updateData(
        usr_auth: String!,
        usr_email: String!,
        usr_username: String!,
        usr_name: String!,
        usr_surname: String!,
        usr_cnpj: String!,
        usr_location: String!
    ): Boolean!
        @auth(keys: ["OGh!pb@lX*fnElqYo8%#VO63KihIr$F1nhf!a@SFOB7$VeQ0*R+s!Sd8wqewq4eq"])
        @token(ignore: false)
        @encodeuri(method: "lz-string")
        @cost(complexity: 50)
    # #### Headers(`Obrigatórios`):
    # + `authorization(String | Array(String))`: Códigos de autorização da solicitação
    # + `token(String)`: Token exclusivo de segurança da solicitação
    # + `encodeuri(Boolean)`: Usado para informar se os parametros estão comprimidos
    # + `internetadress(String)`: Informa o endereço de IP da solicitação
    changePassword(usr_auth: String!, pwd: String!, new_pwd: String!): String!
        @auth(keys: ["Re94FUC3phicraR94Tuq5@0Sto16sp4swa7I1As5uChEmUhExuvATrovic5lfic"])
        @token(ignore: false)
        @encodeuri(method: "lz-string")
        @cost(complexity: 50)
    # #### Headers(`Obrigatórios`):
    # + `authorization(String | Array(String))`: Códigos de autorização da solicitação
    # + `token(String)`: Token exclusivo de segurança da solicitação
    # + `encodeuri(Boolean)`: Usado para informar se os parametros estão comprimidos
    # + `internetadress(String)`: Informa o endereço de IP da solicitação
    authSignTwofactor(usr_auth: String!): String!
        @auth(keys: ["bu9Tix&1amuqihiXeHa*ajucRav6b5p7frOTRan6BLn!R27Wo*rlNA?Huf38riKo"])
        @token(ignore: false)
        @encodeuri(method: "lz-string")
        @cost(complexity: 50)
    # #### Headers(`Obrigatórios`):
    # + `authorization(String | Array(String))`: Códigos de autorização da solicitação
    # + `token(String)`: Token exclusivo de segurança da solicitação
    # + `encodeuri(Boolean)`: Usado para informar se os parametros estão comprimidos
    # + `internetadress(String)`: Informa o endereço de IP da solicitação
    authVerifyTwofactor(usr_auth: String!, usr_qrcode: String!): Boolean!
        @auth(keys: ["duhoHU4o#3!oCHogLw*6WUbrE2radr2CrlpLD+P7Ka*R-veSEB75lsT6PeblPuko"])
        @token(ignore: false)
        @encodeuri(method: "lz-string")
        @cost(complexity: 50)
    # #### Headers(`Obrigatórios`):
    # + `authorization(String | Array(String))`: Códigos de autorização da solicitação
    # + `token(String)`: Token exclusivo de segurança da solicitação
    # + `encodeuri(Boolean)`: Usado para informar se os parametros estão comprimidos
    # + `internetadress(String)`: Informa o endereço de IP da solicitação
    authEnabledTwofactor(usr_auth: String!): String!
        @auth(keys: ["TH6021Mufr&0$B&?&-op&i-L-6p4ATH31h+?*m&dRACAc7e0Osw9$4E3oWRawE8h"])
        @token(ignore: false)
        @encodeuri(method: "lz-string")
        @cost(complexity: 50)
    # #### Headers(`Obrigatórios`):
    # + `authorization(String | Array(String))`: Códigos de autorização da solicitação
    # + `token(String)`: Token exclusivo de segurança da solicitação
    # + `encodeuri(Boolean)`: Usado para informar se os parametros estão comprimidos
    # + `internetadress(String)`: Informa o endereço de IP da solicitação
    authDisableTwofactor(usr_auth: String!): String!
        @auth(keys: ["ciy16pAfawUfe5riwro1lth7barucOgavlprIbrlcrLVikekiPhapr*proDatrOr"])
        @token(ignore: false)
        @encodeuri(method: "lz-string")
        @cost(complexity: 50)
    # #### Headers(`Obrigatórios`):
    # + `authorization(String | Array(String))`: Códigos de autorização da solicitação
    # + `encodeuri(Boolean)`: Usado para informar se os parametros estão comprimidos
    authRetrieveTwofactor(usr_auth: String!): Boolean!
        @auth(keys: ["nlyachaglswisifrufrod0stEpec@UwlvizestAtr1xajanegaswa@remopheWip"])
        @encodeuri(method: "lz-string")
        @cost(complexity: 50)
}

directive @auth(
    keys: [String!]!
) on FIELD_DEFINITION

directive @token(
    ignore: Boolean!
) on FIELD_DEFINITION

directive @encodeuri(
    method: String!
) on FIELD_DEFINITION

directive @cost(
    complexity: Int
    useMultipliers: Boolean
    multipliers: [String!]
) on FIELD_DEFINITION