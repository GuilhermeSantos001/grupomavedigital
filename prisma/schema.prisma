generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CostCenter {
  id        String    @id @default(uuid())
  value     String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  Card      Card[]
  Posting   Posting[]

  @@map("cost_centers")
}

model Scale {
  id        String      @id @default(uuid())
  value     String      @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now()) @updatedAt
  Person    Person[]
  Workplace Workplace[]

  @@map("scales")
}

model Service {
  id          String     @id @default(uuid())
  value       String     @unique
  WorkplaceId String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now()) @updatedAt
  Workplace   Workplace? @relation(fields: [WorkplaceId], references: [id])
  Person      Person[]

  @@map("services")
}

model ReasonForAbsence {
  id             String           @id @default(uuid())
  value          String           @unique
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now()) @updatedAt
  PersonCovering PersonCovering[]
  Posting        Posting[]

  @@map("reason_for_absences")
}

model Street {
  id        String    @id @default(uuid())
  value     String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  Address   Address[]

  @@map("streets")
}

model Neighborhood {
  id        String    @id @default(uuid())
  value     String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  Address   Address[]

  @@map("neighborhoods")
}

model City {
  id        String    @id @default(uuid())
  value     String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  Address   Address[]

  @@map("cities")
}

model District {
  id        String    @id @default(uuid())
  value     String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  Address   Address[]

  @@map("districts")
}

model Address {
  id             String       @id @default(uuid())
  streetId       String
  number         String
  complement     String?
  neighborhoodId String
  cityId         String
  districtId     String
  zipCode        String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
  city           City         @relation(fields: [cityId], references: [id])
  district       District     @relation(fields: [districtId], references: [id])
  neighborhood   Neighborhood @relation(fields: [neighborhoodId], references: [id])
  street         Street       @relation(fields: [streetId], references: [id])
  Person         Person[]
  Workplace      Workplace[]

  @@map("addresses")
}

model Card {
  id             String     @id @default(uuid())
  costCenterId   String
  serialNumber   String     @unique
  lastCardNumber String
  personId       String?
  status         String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @default(now()) @updatedAt
  costCenter     CostCenter @relation(fields: [costCenterId], references: [id])
  person         Person?    @relation(fields: [personId], references: [id])

  @@map("cards")
}

model Person {
  id         String   @id @default(uuid())
  matricule  String   @unique
  name       String
  cpf        String   @unique
  rg         String   @unique
  motherName String
  birthDate  DateTime
  phone      String   @unique
  mail       String   @unique
  addressId  String
  scaleId    String
  serviceId  String
  status     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  address    Address  @relation(fields: [addressId], references: [id])
  scale      Scale    @relation(fields: [scaleId], references: [id])
  service    Service  @relation(fields: [serviceId], references: [id])
  cards      Card[]

  @@map("people")
}

model Workplace {
  id                String    @id @default(uuid())
  name              String
  scaleId           String
  entryTime         String
  exitTime          String
  status            String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now()) @updatedAt
  addressId         String
  address           Address   @relation(fields: [addressId], references: [id])
  scale             Scale     @relation(fields: [scaleId], references: [id])
  CoveringWorkplace Posting[] @relation("CoverageWorkplaceId")
  CoverageWorkplace Posting[] @relation("CoveringWorkplaceId")
  services          Service[]

  @@map("workplaces")
}

model Upload {
  id             String           @id @default(uuid())
  fileId         String           @unique
  authorId       String
  filename       String
  filetype       String
  description    String
  size           BigInt
  compressedSize BigInt
  version        Int
  temporary      Boolean
  expiredAt      DateTime
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now()) @updatedAt
  PersonCoverage PersonCoverage[]
  PersonCovering PersonCovering[]

  @@map("uploads")
}

model PersonCovering {
  id                 String            @id @default(uuid())
  mirrorId           String
  reasonForAbsenceId String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @default(now()) @updatedAt
  mirror             Upload            @relation(fields: [mirrorId], references: [id], onDelete: Cascade)
  reasonForAbsence   ReasonForAbsence? @relation(fields: [reasonForAbsenceId], references: [id])
  Posting            Posting[]

  @@map("person_covering")
}

model PersonCoverage {
  id                 String    @id @default(uuid())
  mirrorId           String?
  modalityOfCoverage String
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @default(now()) @updatedAt
  mirror             Upload?   @relation(fields: [mirrorId], references: [id], onDelete: Cascade)
  Posting            Posting[]

  @@map("person_coverage")
}

model Posting {
  id                   String            @id @default(uuid())
  author               String
  costCenterId         String
  periodStart          DateTime
  periodEnd            DateTime
  originDate           DateTime
  description          String?
  coveringId           String?
  coverageId           String
  reasonForAbsenceId   String?
  coveringWorkplaceId  String
  coverageWorkplaceId  String?
  paymentMethod        String
  paymentValue         Int
  paymentDatePayable   DateTime
  paymentStatus        String
  paymentDatePaid      DateTime?
  paymentDateCancelled DateTime?
  foremanApproval      Boolean?
  managerApproval      Boolean?
  status               String
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @default(now()) @updatedAt
  costCenter           CostCenter        @relation(fields: [costCenterId], references: [id])
  coverage             PersonCoverage    @relation(fields: [coverageId], references: [id], onDelete: Cascade)
  coverageWorkplace    Workplace?        @relation("CoverageWorkplaceId", fields: [coverageWorkplaceId], references: [id])
  covering             PersonCovering?   @relation(fields: [coveringId], references: [id], onDelete: Cascade)
  coveringWorkplace    Workplace         @relation("CoveringWorkplaceId", fields: [coveringWorkplaceId], references: [id])
  ReasonForAbsence     ReasonForAbsence? @relation(fields: [reasonForAbsenceId], references: [id])

  @@map("postings")
}
