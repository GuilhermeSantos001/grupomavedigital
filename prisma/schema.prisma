generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CostCenter {
  id        String   @id @default(uuid())
  value     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  card    Card[]
  posting Posting[]

  @@map("cost_centers")
}

model Scale {
  id        String   @id @default(uuid())
  value     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  person    Person[]
  workplace Workplace[]

  @@map("scales")
}

model Service {
  id        String   @id @default(uuid())
  value     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  personService    PersonService[]
  workplaceService WorkplaceService[]

  @@map("services")
}

model PersonService {
  id        String  @id @default(uuid())
  personId  String
  person    Person  @relation(fields: [personId], references: [id])
  serviceId String
  service   Service @relation(fields: [serviceId], references: [id])

  @@map("people_service")
}

model WorkplaceService {
  id          String    @id @default(uuid())
  workplaceId String
  workplace   Workplace @relation(fields: [workplaceId], references: [id])
  serviceId   String
  service     Service   @relation(fields: [serviceId], references: [id])

  @@map("workplaces_service")
}

model ReasonForAbsence {
  id        String   @id @default(uuid())
  value     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  personCovering PersonCovering[]

  @@map("reason_for_absences")
}

model Street {
  id        String   @id @default(uuid())
  value     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  address Address[]

  @@map("streets")
}

model Neighborhood {
  id        String   @id @default(uuid())
  value     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  address Address[]

  @@map("neighborhoods")
}

model City {
  id        String   @id @default(uuid())
  value     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  address Address[]

  @@map("cities")
}

model District {
  id        String   @id @default(uuid())
  value     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  address Address[]

  @@map("districts")
}

model Address {
  id             String   @id @default(uuid())
  streetId       String
  number         String
  complement     String?
  neighborhoodId String
  cityId         String
  districtId     String
  zipCode        String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt

  city         City         @relation(fields: [cityId], references: [id])
  district     District     @relation(fields: [districtId], references: [id])
  neighborhood Neighborhood @relation(fields: [neighborhoodId], references: [id])
  street       Street       @relation(fields: [streetId], references: [id])
  person       Person[]
  workplace    Workplace[]

  @@map("addresses")
}

model Card {
  id             String   @id @default(uuid())
  costCenterId   String
  serialNumber   String   @unique
  lastCardNumber String
  personId       String?
  status         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt

  costCenter CostCenter @relation(fields: [costCenterId], references: [id])
  person     Person?    @relation(fields: [personId], references: [id])

  @@map("cards")
}

model Person {
  id         String   @id @default(uuid())
  matricule  String   @unique
  name       String
  cpf        String   @unique
  rg         String   @unique
  motherName String
  birthDate  DateTime
  phone      String   @unique
  mail       String   @unique
  addressId  String
  scaleId    String
  status     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  address       Address         @relation(fields: [addressId], references: [id])
  scale         Scale           @relation(fields: [scaleId], references: [id])
  cards         Card[]
  personService PersonService[]

  @@map("people")
}

model Workplace {
  id        String   @id @default(uuid())
  name      String
  scaleId   String
  entryTime DateTime
  exitTime  DateTime
  addressId String
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  address             Address            @relation(fields: [addressId], references: [id])
  scale               Scale              @relation(fields: [scaleId], references: [id])
  coveringWorkplaceId Posting[]          @relation("CoverageWorkplaceId")
  coverageWorkplaceId Posting[]          @relation("CoveringWorkplaceId")
  workplaceService    WorkplaceService[]

  @@map("workplaces")
}

model Upload {
  id             String   @id @default(uuid())
  fileId         String
  authorId       String
  filename       String
  filetype       String
  description    String
  size           Int
  compressedSize Int
  version        Int
  temporary      Boolean
  expiredAt      DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt

  personCoverage PersonCoverage[]
  personCovering PersonCovering[]

  @@map("uploads")
}

model PersonCovering {
  id                 String   @id @default(uuid())
  mirrorId           String   @unique
  reasonForAbsenceId String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now()) @updatedAt

  mirror           Upload           @relation(fields: [mirrorId], references: [id])
  reasonForAbsence ReasonForAbsence @relation(fields: [reasonForAbsenceId], references: [id])
  posting          Posting[]

  @@map("person_covering")
}

model PersonCoverage {
  id                 String   @id @default(uuid())
  mirrorId           String?  @unique
  modalityOfCoverage String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now()) @updatedAt

  mirror  Upload?   @relation(fields: [mirrorId], references: [id])
  posting Posting[]

  @@map("person_coverage")
}

model Posting {
  id                   String    @id @default(uuid())
  author               String
  costCenterId         String
  periodStart          DateTime
  periodEnd            DateTime
  originDate           DateTime
  description          String?
  coveringId           String?
  coverageId           String
  coveringWorkplaceId  String
  coverageWorkplaceId  String?
  paymentMethod        String
  paymentValue         Int
  paymentDatePayable   DateTime
  paymentStatus        String
  paymentDatePaid      DateTime?
  paymentDateCancelled DateTime?
  foremanApproval      Boolean?
  managerApproval      Boolean?
  status               String
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @default(now()) @updatedAt

  costCenter        CostCenter      @relation(fields: [costCenterId], references: [id])
  coverage          PersonCoverage  @relation(fields: [coverageId], references: [id])
  coverageWorkplace Workplace?      @relation("CoverageWorkplaceId", fields: [coverageWorkplaceId], references: [id])
  covering          PersonCovering? @relation(fields: [coveringId], references: [id])
  coveringWorkplace Workplace       @relation("CoveringWorkplaceId", fields: [coveringWorkplaceId], references: [id])

  @@map("postings")
}
